#define BOOL int
#define TRUE 1
#define FALSE 0


#include <SDL2/SDL.h>
#include <stdio.h>

//指令：gcc -o SdlTest.exe SdlTest.c -lmingw32 -lSDL2main -lSDL2 

int singleParticleSize = 18;
int WIDTH;
int HEIGHT;
int step;
int widthnum;
int heightnum; 
int **cells;
int **cellsOld;



SDL_Window* window;
SDL_Renderer* renderer;

static void show_menu();
void PopulateCells();
void RenderScreen();
void CreateArrayBackup();
int GetNeighbours(int x, int y);
void StepLife();
int count_heightnum(const char *path); 

BOOL isPaused = FALSE;
BOOL showGrid = TRUE;



int main(int argc, char* argv[])
{
	
	//主菜单，选择自定义或输入文件 
	show_menu();
    int choice;
    printf("请输入你的选择\n");
    scanf("%d", &choice);
    if (choice != 1 && choice != 2)  return  -1;//非法输入
    printf("输入循环次数\n");
	scanf("%d",&step);
	if(step<=0) {
		printf("please input an positive integer as the number of step\n");
		return -1;
	}//非法输入 
    
    if(choice == 1){
	        printf("输入宽高\n");
	        scanf("%d%d",&widthnum,&heightnum);
	        if(widthnum<=0 || heightnum<=0) {
		        printf("please input an positive integer as the width and height\n");
		        return -1;
	        }
	        WIDTH = widthnum*singleParticleSize;
            HEIGHT = heightnum*singleParticleSize;
    		//创建数组并全部初始化为0 
	        cells = (int**)malloc(sizeof(int*) * heightnum); 
	        for (int i = 0; i < heightnum; i++)
                cells[i] = (int*)malloc(sizeof(int) * widthnum);
            for (int i = 0; i < heightnum; i++){
		        for (int j = 0; j < widthnum; j++){
        	        cells[i][j] = 0; 
		        }
	        }//数组cells 
	        
	        cellsOld = (int**)malloc(sizeof(int*) * heightnum); 
	        for (int i = 0; i < heightnum; i++)
                cellsOld[i] = (int*)malloc(sizeof(int) * widthnum);
            for (int i = 0; i < heightnum; i++){
		        for (int j = 0; j < widthnum; j++){
        	        cellsOld[i][j] = 0; 
		        }
	        }//数组cellsOld 
	        //为cells随机赋值
	        PopulateCells(); 
    }else{
    		//统计heightnum和widthnum 
    		count_heightnum("D:\\programming project\\cw2\\test.txt");
    		WIDTH = widthnum*singleParticleSize;
            HEIGHT = heightnum*singleParticleSize;
    		//get data from the file
    		//创建数组并全部初始化为0 
	        cells = (int**)malloc(sizeof(int*) * heightnum); 
	        for (int i = 0; i < heightnum; i++)
                cells[i] = (int*)malloc(sizeof(int) * widthnum);
            //数组cells 
	        cellsOld = (int**)malloc(sizeof(int*) * heightnum); 
	        for (int i = 0; i < heightnum; i++)
                cellsOld[i] = (int*)malloc(sizeof(int) * widthnum);
            for (int i = 0; i < heightnum; i++){
		        for (int j = 0; j < widthnum; j++){
        	        cellsOld[i][j] = 0; 
		        }
	        }//数组cellsOld    		
    		
    		//将文件中的数据输入数组 
			FILE *fp=NULL;			 
    		fp=fopen("D:\\programming project\\cw2\\test.txt","r");
    		//if(!fp){
    	        //printf("无文件\n");
    	        //return -1;
	        //} 
    		for (int i=0; i<heightnum;i++){
    			for(int j=0; j<widthnum;j++){
    				fscanf(fp,"%d",&cells[i][j]);
    				if(cells[i][j]!=1&&cells[i][j]!=0) {
    					printf("文件中含非0和1的数字或字符\n");
    					return -1;
					}
				}
			}
			fclose(fp);
	}

    //初始化窗口
	/* Initialize SDL. */
    if (SDL_Init(SDL_INIT_VIDEO) < 0)
        return 1;
	/* Create the window where we will draw. */
    window = SDL_CreateWindow("Game of life",
                    SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
                    WIDTH, HEIGHT,
                    0);
    
    if (window == NULL) {
        // In the case that the window could not be made...
        printf("Could not create window: %s\n", SDL_GetError());
        return 1;
    }
    
    /* We must call SDL_CreateRenderer in order for draw calls to affect this window. */
    renderer = SDL_CreateRenderer(window, -1, 0); 
	
	
	/* Select the color for drawing. It is set to black here. */
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255); 

    /* Clear the entire screen to our selected color. */
    SDL_RenderClear(renderer);
    
    //显示
    int S=0;
    while(S<step){
    	RenderScreen();
    	CreateArrayBackup();
    	StepLife();
    	for(int i=0;i<heightnum;i++){
    		for(int j=0;j<widthnum;j++){
    			printf("%d",cells[i][j]);
			}
			printf("\n");
		}
    	printf("\n");
    	/* Up until now everything was drawn behind the scenes.
    This will show the new, red contents of the window. */
    	SDL_RenderPresent(renderer);
    	/* Give us time to see the window. */
    	SDL_Delay(6000);
    	S++;
	}

    /* Always be sure to clean up */
    SDL_Quit();
    
    //将数组数据存入文件中
    FILE *fp=NULL;
    fp=fopen("D:\\programming project\\cw2\\final.txt","w");
    if(!fp){
    	printf("无文件\n");
    	return -1;
	}
	for(int i=0;i<heightnum;i++){
        for(int j=0;j<widthnum;j++){
			fprintf(fp,"%d",cells[i][j]);
        }
        fscanf(fp,"\n");
    }
	fclose(fp); 
    
    
    return 0;

}


//主菜单
static void show_menu() {
    printf("	______________________________________________________________________________\n");
    printf("	|---->                       请选择输入你要操作的选择                    <----|\n");
    printf("	|----> 1: 自定义                                                         <----|\n");
    printf("	|----> 2：载入文件                                                       <----|\n");
    printf("	|_____________________________________________________________________________|\n");
}

//计算heightnum和widthnum 
int count_heightnum(const char *path){
    char ch,ch_prev=0;
    int i=0,n;
    FILE *fp=NULL;
    int num,*p=NULL;
    if(path==NULL||path[0]==0){
    	printf("文件路径输入错误\n");
    	return -1;
	}
	
    fp=fopen(path,"r");
    if(!fp){
    	printf("无文件\n");
    	return -1;
	} 
	
    //统计总字数
    while(fscanf(fp,"%d",&num)!=-1)i++;
    n=i;
	//统计行数
    fseek(fp,0,SEEK_SET);//重置文件流指针
    i=0;
    while(1){
        ch=fgetc(fp);
        if (ch==-1){
            if (ch_prev!='\n')i++;//若最后一行直接换行未结束则总行数加1
            break;
        }
        if(ch=='\n')i++;
        ch_prev=ch;
    }
    heightnum=i;
    if (n%heightnum!=0)
    {
        printf("数据异常\n");
        return -1;
    }
    widthnum=n/heightnum;
    fclose(fp);
} 




void PopulateCells() {    
    for (int j = 0; j < heightnum;j++) {
        for (int i = 0; i < widthnum; i++) {
            if (rand() % 3 == 1) {
                cells[j][i] = 1;
            }
        }
    }
}

void RenderScreen(){
	for(int i=0; i<heightnum; i++){
		for(int j=0; j<widthnum;j++){
			SDL_Rect rect;
			rect.x = j*singleParticleSize;
            rect.y = i*singleParticleSize;
            rect.w = 15;
            rect.h = 15;
            
            if(cells[i][j]==1){
            	SDL_SetRenderDrawColor(renderer, 135, 206, 235, 255);
            	SDL_RenderFillRect(renderer, &rect);
			}else{
				SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
            	SDL_RenderFillRect(renderer, &rect);
			}         
		}
	}
}

void CreateArrayBackup() {
    for (int y = 0; y < heightnum; y++) {
        for (int x = 0; x < widthnum; x++) {
            cellsOld[y][x] = cells[y][x];
        }
    }
}

int GetNeighbours(int x, int y) {//Count the number of alive cells neighbouring a cell

    int count = 0;
    
    if(y-1>=0){
    	if(cellsOld[y-1][x]==1){
    		count++;
		}
	}
    if(y+1<heightnum){
    	if(cellsOld[y+1][x]==1){
    		count++;

		}
	}
	if(x-1>=0){
    	if(cellsOld[y][x-1]==1){
    		count++;

		}
	}
	if(x+1<widthnum){
    	if(cellsOld[y][x+1]==1){
    		count++;

		}
	}
	if((y-1>=0)&&(x-1>=0)){
    	if(cellsOld[y-1][x-1]==1){
    		count++;

		}
	}
	if((y+1<heightnum)&&(x-1>=0)){
    	if(cellsOld[y+1][x-1]==1){
    		count++;

		}
	}
	if((y-1>=0)&&(x+1<widthnum)){
    	if(cellsOld[y-1][x+1]==1){
    		count++;

		}
	}
	if((y+1<heightnum)&&(x+1<widthnum)){
    	if(cellsOld[y+1][x+1]==1){
    		count++;

		}
	}

	return count;
}

void StepLife() {
    int neighbours = 0;
    for (int y = 0; y < heightnum; y++) {
        for (int x = 0; x < widthnum; x++) {
            neighbours = GetNeighbours(x, y);
            
            if(neighbours==3){
            	cells[y][x] = 1;
			}else if(neighbours==2){
				cells[y][x] = cells[y][x];
			}else{
				cells[y][x] = 0;
			}				
		}

    }
}
